{"version":3,"sources":["components/Dialogs/Dialogs.module.css","HOC/withAuthRedirect.js","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","dialogs","dialogsItems","active","messages","message","mapStateToPropsForRedirect","state","isAuth","auth","DialogItem","props","path","id","react_default","a","createElement","className","s","dialog","react_router_dom","to","name","Message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","Dialogs","dialogsPage","dialogsElements","map","DialogItem_DialogItem","messagesElements","Message_Message","react_router","values","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageCreator","Component","React","render","this"],"mappings":"6EACAA,EAAAC,QAAA,CAAkBC,QAAA,yBAAAC,aAAA,8BAAAC,OAAA,wBAAAC,SAAA,0BAAAC,QAAA,8GCGlB,IAAIC,EAA8BC,IAAD,CAEzBC,OAAOD,EAAME,KAAKD,gDCIXE,MANKC,IAChB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OAAQC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEC,QACtBL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAASC,GAAIT,GAAOD,EAAMW,QCCnBC,MALEZ,GACNG,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEb,SAAUM,EAAMN,0CCK7C,MA4BMmB,EAAcC,YAAiB,IAW/BC,EAAsBC,YAAU,CAACC,KAAK,wBAAhBD,CATJhB,GAEhBG,EAAAC,EAAAC,cAAA,QAAMa,SAAUlB,EAAMmB,cAClBhB,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAOC,UAAWC,IAAUX,KAAM,iBAAkBY,YAAY,qBAAqBC,SAAU,CAACC,IAASZ,MAC9GV,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,iCAOFqB,MAzCE1B,IACb,IAAIJ,EAAQI,EAAM2B,YAEdC,EAAkBhC,EAAMN,QAAQuC,IAAKrB,GAAWL,EAAAC,EAAAC,cAACyB,EAAD,CAAYnB,KAAMH,EAAOG,KAAMT,GAAIM,EAAON,MAC1F6B,EAAmBnC,EAAMH,SAASoC,IAAKnC,GAAYS,EAAAC,EAAAC,cAAC2B,EAAD,CAAStC,QAASA,EAAQA,WAIjF,IAAIM,EAAMH,OACN,OAAOM,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAUvB,GAAI,WAMzB,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEjB,SACda,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEhB,cACbqC,GAELzB,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAEd,UACdU,EAAAC,EAAAC,cAAA,WAAM0B,GACN5B,EAAAC,EAAAC,cAACU,EAAD,CAAqBG,SAXZgB,IACjBlC,EAAMmC,YAAYD,EAAOE,sBCDlBC,sBACXC,YAfmB1C,IACZ,CACH+B,YAAa/B,EAAM+B,YACnB9B,OAAQD,EAAME,KAAKD,SAGD0C,IACf,CACHJ,YAAaC,IACTG,EAASC,YAAmBJ,QJLPK,IAU7B,OAFiCH,YAAQ3C,EAA2B,GAAnC2C,CAPjC,cAAgCI,IAAMD,UAClCE,SACI,OAAIC,KAAK5C,MAAMH,OACRM,EAAAC,EAAAC,cAACoC,EAAcG,KAAK5C,OADGG,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAUvB,GAAI,eIOzC2B,CAGbX","file":"static/js/4.cbeb1dae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3QSNi\",\"dialogsItems\":\"Dialogs_dialogsItems__1TSZZ\",\"active\":\"Dialogs_active__BjKJS\",\"messages\":\"Dialogs_messages__1Koco\",\"message\":\"Dialogs_message__1f5fW\"};","import React from 'react';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state) => (\r\n    {\r\n        isAuth:state.auth.isAuth\r\n    }\r\n)\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render () {\r\n            if(!this.props.isAuth) return <Redirect to={'/login'}/>\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect,{})(RedirectComponent);\r\n\r\n    return ConnectedRedirectComponent;\r\n}","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (<div className={s.dialog}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>);\r\n}\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../Common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validator\";\r\n\r\nconst Dialogs = (props) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map((dialog) => <DialogItem name={dialog.name} id={dialog.id}/>);\r\n    let messagesElements = state.messages.map((message) => <Message message={message.message}/>);\r\n\r\n\r\n\r\n    if(!props.isAuth) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n    let addNewMessage = (values) =>{\r\n        props.sendMessage(values.newMessageBody)\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div><Field component={Textarea} name={\"newMessageBody\"} placeholder=\"Enter your message\" validate={[required,maxLength50]}/></div>\r\n            <div><button>Send message</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm({form:\"dialogAddMessageForm\"})(AddMessageForm);\r\n\r\nexport default Dialogs;\r\n\r\n","import { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { withAuthRedirect } from \"../../HOC/withAuthRedirect\";\r\nimport { sendMessageCreator } from \"../../redux/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendMessage:(newMessageBody) => {\r\n            dispatch(sendMessageCreator(newMessageBody));\r\n        }\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps,mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n"],"sourceRoot":""}